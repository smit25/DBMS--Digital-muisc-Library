//TABLES

create table user(user_id int not null auto_increment, firstname varchar(255) not null, lastname varchar(255) not null, email_id varchar(255), password varchar(255) not null, subscription int DEFAULT 0 primary key(user_id) );

create table playlist(playlist_id int not null auto_increment, title varchar(255) not null, info varchar(255), user_id int not null, primary key(playlist_id), foreign key(user_id) references user(user_id) );

create table songs( song_id int auto_increment, title varchar(255) not null, link varchar(255) not null, info varchar(255), playlist_id int not null, category_id int not null, primary key(song_id), foreign key(playlist_id) references playlist(playlist_id), foreign key(category_id) references category(category_id) );
 sub
create table comments( comment_id int not null auto_increment, text_c varchar(1000) not null, primary key(comment_id), song_id int not null, user_id int not null, foreign key(song_id) references songs(song_id), foreign key(user_id) references user(user_id)); 

create table category( category_id int auto_increment not null, text varchar(1000) not null, primary key(category_id) );


//TRIGGERS

Drop TRIGGER IF EXISTS songDeleteTrigger;
              DELIMITER //
              CREATE TRIGGER songDeleteTrigger
              BEFORE DELETE ON songs
                     FOR EACH ROW
                     BEGIN
                       DELETE FROM comments WHERE OLD.song_id = song_id;
                       DELETE FROM category WHERE OLD.song_id = song_id;
                       DELETE FROM playlist WHERE OLD.song_id = song_id;
                       
                     END;//
            DELIMITER ;


Drop TRIGGER IF EXISTS playlistDeleteTrigger;
		DELIMITER //
		CREATE TRIGGER playlistDeleteTrigger
		BEFORE DELETE ON playlist
			FOR EACH ROW
			BEGIN
			  DELETE FROM songs where OLD.playlist_id = playlist_id;

			END;//
		DELIMITER;	
